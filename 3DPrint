<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OctoPrint Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f8ff;
            color: #333;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #1e90ff;
        }
        .container {
            max-width: 900px;
            margin: auto;
            background-color: #ffffff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .status, .controls, .camera {
            margin-bottom: 20px;
        }
        .status div, .controls div {
            margin-bottom: 10px;
        }
        .status div span, .controls div button {
            font-weight: bold;
        }
        .camera {
            text-align: center;
        }
        .camera iframe {
            width: 100%;
            height: 400px;
            border: none;
        }
        .upload {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .upload input {
            width: 80%;
        }
    </style>
</head>
<body>
    <h1>OctoPrint Dashboard</h1>
    <div class="container">
        <!-- Status Section -->
        <div class="status">
            <h2>Status Information</h2>
            <div>Print Time Left: <span id="print-time-left">Loading...</span></div>
            <div>Temperature: <span id="temp">Loading...</span></div>
            <div>Heated Bed: <span id="bed-temp">Loading...</span></div>
        </div>

        <!-- Controls Section -->
        <div class="controls">
            <h2>Controls</h2>
            <div>
                <button onclick="startPrint()">Start Print</button>
                <button onclick="pausePrint()">Pause Print</button>
                <button onclick="stopPrint()">Stop Print</button>
            </div>
            <div class="upload">
                <input type="file" id="gcode-file" accept=".gcode" />
                <button onclick="uploadGCode()">Upload GCode</button>
            </div>
        </div>

        <!-- Camera Section -->
        <div class="camera">
            <h2>Camera</h2>
            <!-- Placeholder for camera feed -->
            <iframe id="camera-feed" src="" alt="Camera feed"></iframe>
        </div>
    </div>

    <script>
        const apiKey = "DWQNtwQ-3u_pXX7WqHDuDNAG0uDm6UWEaqWWbdJB52U"; // Replace with your actual OctoPrint API key
        const octoPrintUrl = "http://your-octoprint.local/api/"; // Replace with your OctoPrint API endpoint

        // Fetch status information
        function fetchStatus() {
            fetch(`${octoPrintUrl}printer`, {
                headers: { "X-Api-Key": apiKey }
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById("print-time-left").textContent = data.progress.printTimeLeft;
                document.getElementById("temp").textContent = `${data.temperature.tool0.actual}°C`;
                document.getElementById("bed-temp").textContent = `${data.temperature.bed.actual}°C`;
            })
            .catch(error => console.error("Error fetching status:", error));
        }

        // Start print (upload GCode)
        function startPrint() {
            const fileInput = document.getElementById("gcode-file");
            if (fileInput.files.length > 0) {
                const formData = new FormData();
                formData.append("file", fileInput.files[0]);

                fetch(`${octoPrintUrl}files/local`, {
                    method: "POST",
                    headers: { "X-Api-Key": apiKey },
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    fetch(`${octoPrintUrl}job`, {
                        method: "POST",
                        headers: {
                            "X-Api-Key": apiKey,
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            command: "start",
                            file: { name: data.name }
                        })
                    })
                    .then(response => console.log("Print started"))
                    .catch(error => console.error("Error starting print:", error));
                })
                .catch(error => console.error("Error uploading GCode:", error));
            } else {
                alert("Please select a GCode file to upload.");
            }
        }

        // Pause print
        function pausePrint() {
            fetch(`${octoPrintUrl}job`, {
                method: "POST",
                headers: {
                    "X-Api-Key": apiKey,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ command: "pause" })
            })
            .then(response => console.log("Print paused"))
            .catch(error => console.error("Error pausing print:", error));
        }

        // Stop print
        function stopPrint() {
            fetch(`${octoPrintUrl}job`, {
                method: "POST",
                headers: {
                    "X-Api-Key": apiKey,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ command: "cancel" })
            })
            .then(response => console.log("Print stopped"))
            .catch(error => console.error("Error stopping print:", error));
        }

        // Upload GCode file
        function uploadGCode() {
            const fileInput = document.getElementById("gcode-file");
            if (fileInput.files.length > 0) {
                const formData = new FormData();
                formData.append("file", fileInput.files[0]);

                fetch(`${octoPrintUrl}files/local`, {
                    method: "POST",
                    headers: { "X-Api-Key": apiKey },
                    body: formData
                })
                .then(response => response.json())
                .then(data => console.log("GCode uploaded"))
                .catch(error => console.error("Error uploading GCode:", error));
            } else {
                alert("Please select a GCode file.");
            }
        }

        // Fetch camera feed (you can replace the URL with your camera feed URL later)
        function fetchCameraFeed() {
            const cameraIframe = document.getElementById("camera-feed");
            cameraIframe.src = "http://your-camera-feed-url"; // Replace with your camera URL
        }

        // Initialize
        fetchStatus();
        fetchCameraFeed();
    </script>
</body>
</html>
